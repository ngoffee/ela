-->begin
using System;
using System.IO;
using System.Collections;
using Buffer = Ela.Parsing.StringBuffer;

-->namespace
namespace Ela.Parsing {


//-----------------------------------------------------------------------------------
// Scanner
//-----------------------------------------------------------------------------------
internal sealed class Scanner {
	const char EOL = '\n';
	const int eofSym = 0; /* pdt */
-->declarations

	public SourceBuffer buffer; // scanner buffer
	
	Token t;          // current token
	int ch;           // current input character
	int pos;          // byte position of current character
	int charPos;      // position by unicode characters starting with 0
	int col;          // column number of current character
	int line;         // line number of current character
	int oldEols;      // EOLs that appeared in a comment;
	static readonly Map start; // maps first token character to start state

	Token tokens;     // list of tokens already peeked (first token is a dummy)
	Token pt;         // current peek token
	
	char[] tval = new char[128]; // text of current token
	int tlen;         // length of current token
	
	static Scanner() {
		start = new Map(128);
-->initialization
	}
	
    public Scanner (SourceBuffer buffer) {
        this.buffer = buffer;
        Init();
    }
    
    public Scanner (Stream s) {
        using (var sr = new StreamReader(s))
            buffer = new Buffer(sr.ReadToEnd());
        Init();
    }
    
    void Init() {
        pos = -1; line = 1; col = 0; charPos = -1;
        oldEols = 0;
        NextCh();
        pt = tokens = new Token();  // first token is a dummy
    }
	
	void NextCh() {
		if (oldEols > 0) { ch = EOL; oldEols--; } 
		else {
			pos = buffer.Pos;
			// buffer reads unicode chars, if UTF8 has been detected
			ch = buffer.Read(); col++; charPos++;
			// replace isolated '\r' by '\n' in order to make
			// eol handling uniform across Windows, Unix and Mac
			if (ch == '\r' && buffer.Peek() != '\n') ch = EOL;

			if (ch == EOL) { line++; col = 0; }
		}
-->casing1
	}

	void AddCh() {
		if (tlen >= tval.Length) {
			char[] newBuf = new char[2 * tval.Length];
			Array.Copy(tval, 0, newBuf, 0, tval.Length);
			tval = newBuf;
		}
		if (ch != Buffer.EOF) {
-->casing2
			NextCh();
		}
	}


-->comments

	void CheckLiteral() {
-->literals
	}

    bool nl = true;
	FastStack<Int32> istack = new FastStack<Int32>();
	int expectIndent = 0;
	int indent = -1;
	
	internal void PopIndent() {
		if (istack.Count > 0) {
			istack.Pop();
			expectIndent = istack.Count > 0 ? istack.Peek() : -1;
		}
		else
			expectIndent = -1;		
	}
		
	internal void InjectBlock() {
		istack.Push(t.col);
		expectIndent = t.col;
		indent = -1;
		nl = false;
	}
	
	internal void InjectBlock(int col) {
		istack.Push(col);
		expectIndent = col;
		indent = -1;
		nl = false;
	}

	Token NextToken() {
		while (ch == ' ' ||
-->scan1
		) {
			if (ch == ' ' && nl)
				indent++;
			else if (ch == '\r' || ch == '\n'){			
				nl = true;
				indent = 0;
			}
			else
				nl = false;
			
			NextCh();
		}
-->scan2
        if (indent > -1 && indent < expectIndent) {
			t = new Token();
			t.pos = pos; t.col = col; t.line = line; t.virt = true;
			t.kind = Parser._EBLOCK;
			istack.Pop();
			
			if (istack.Count > 0)
				expectIndent = istack.Peek();
			else
				indent = expectIndent = -1;
				
			return t;
		}

		int recKind = noSym;
		int recEnd = pos;
		t = new Token();
		t.pos = pos; t.col = col; t.line = line; t.charPos = charPos;
		int state;
		if (start.ContainsKey(ch)) { state = (int) start[ch]; }
		else { state = 0; }
		tlen = 0; AddCh();

        if (state == -1 && istack.Count > 0) {
			t = new Token();
			t.pos = pos; t.col = col; t.line = line; t.virt = true;
			t.kind = Parser._EBLOCK;
			istack.Pop();
			
			if (istack.Count > 0)
				expectIndent = istack.Peek();
			else
				indent = expectIndent = -1;
				
			return t;
		}
		
		switch (state) {
			case -1: { t.kind = eofSym; break; } // NextCh already done
			case 0: {
				if (recKind != noSym) {
					tlen = recEnd - t.pos;
					SetScannerBehindT();
				}
				t.kind = recKind; break;
			} // NextCh already done
-->scan3
		}
		t.val = new String(tval, 0, tlen);
		return t;
	}
	
	private void SetScannerBehindT() {
		buffer.Pos = t.pos;
		NextCh();
		line = t.line; col = t.col; charPos = t.charPos;
		for (int i = 0; i < tlen; i++) NextCh();
	}
	
	// get the next token (possibly a token already seen during peeking)
	public Token Scan () {
		if (tokens.next == null) {
			return NextToken();
		} else {
			pt = tokens = tokens.next;
			return tokens;
		}
	}

	// peek for the next token, ignore pragmas
	public Token Peek () {
		do {
			if (pt.next == null) {
				pt.next = NextToken();
			}
			pt = pt.next;
		} while (pt.kind > maxT); // skip pragmas
	
		return pt;
	}

	// make sure that peeking starts at the current scan position
	public void ResetPeek () { pt = tokens; }

} // end Scanner

}
